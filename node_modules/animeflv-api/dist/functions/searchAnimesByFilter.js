"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchAnimesByFilter = void 0;
const cloudscraper_1 = __importDefault(require("cloudscraper"));
const constants_1 = require("../constants");
const utils_1 = require("../utils");
function generateRequestUrl(options) {
    const quitarAcentos = (cadena) => {
        const acentos = { 'á': 'a', 'é': 'e', 'í': 'i', 'ó': 'o', 'ú': 'u', 'Á': 'A', 'É': 'E', 'Í': 'I', 'Ó': 'O', 'Ú': 'U' };
        //@ts-ignore
        return cadena.split('').map(letra => acentos[letra] || letra).join('').toString();
    };
    if (!options)
        return "https://www3.animeflv.net/browse?order=default";
    const FinalUrl = new URL("https://www3.animeflv.net/browse");
    let filteredGenres = "";
    let parsedStatuses = "";
    let parsedTypes = "";
    const genrePrefix = "genre[]";
    const typePrefix = "type[]";
    const statusPrefix = "status[]";
    const orderPrefix = "order";
    if (options.genres && Array.isArray(options.genres)) {
        filteredGenres = options.genres.filter(genre => constants_1.AnimeGenres.includes(genre));
        for (const genre of filteredGenres) {
            const normalizedGenre = quitarAcentos(genre).replace(/\s+/g, "-").toLowerCase();
            FinalUrl.searchParams.append(genrePrefix, normalizedGenre);
        }
    }
    if (options.statuses && Array.isArray(options.statuses)) {
        parsedStatuses = options.statuses.filter(status => status in constants_1.AnimeStatusEnum);
        for (const status of parsedStatuses) {
            FinalUrl.searchParams.append(statusPrefix, constants_1.AnimeStatusEnum[status].toString());
        }
    }
    if (options.types && Array.isArray(options.types)) {
        parsedTypes = options.types.filter(type => type in constants_1.AnimeTypeEnum);
        for (const type of parsedTypes) {
            FinalUrl.searchParams.append(typePrefix, constants_1.AnimeTypeEnum[type]);
        }
    }
    if (options.order && (options.order in constants_1.FilterOrderEnum)) {
        FinalUrl.searchParams.append(orderPrefix, constants_1.FilterOrderEnum[options.order]);
    }
    else {
        FinalUrl.searchParams.append(orderPrefix, constants_1.FilterOrderEnum["Por Defecto"]);
    }
    return FinalUrl.toString();
}
async function searchAnimesByFilter(opts) {
    try {
        /** La url del request con los filtros ya puestos */
        const formatedUrl = generateRequestUrl(opts);
        constants_1.CloudscraperOptions.uri = formatedUrl;
        const filterData = (await (0, cloudscraper_1.default)(constants_1.CloudscraperOptions));
        return (0, utils_1.executeSearch)(filterData);
    }
    catch {
        return null;
    }
}
exports.searchAnimesByFilter = searchAnimesByFilter;
